{"version":3,"sources":["assets/images/happy.png","assets/images/sad2.png","assets/images/angry.png","assets/images/mustaches.png","assets/images/nav.png","components/CircularSideNav/CircularSideNav.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CircularSideNav","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","openElementsHandler","setState","isHovering","outerCircleRadius","state","mainCircleRadius","closeElementsHandler","windowWidth","window","innerWidth","windowHeight","innerHeight","navSize","console","log","animationPeriod","prevState","objectSpread","_this2","addEventListener","updateWindowDimensions","bind","removeEventListener","_this3","middleOfPage","elementsLength","elements","length","T","Math","floor","elemetRadius","navElements","map","el","i","newT","circleX","round","cos","PI","circleY","sin","elStyle","left","top","width","height","cursor","transitionDelay","animation","className","react_default","a","createElement","key","style","Fragment","backgroundImage","concat","backgroundImg","backgroundColor","backgroundSize","onMouseEnter","onMouseLeave","React","Component","App","_useState","useState","src","sad","angry","happy","mustaches","borderRadius","mainCircleColor","_useState2","slicedToArray","testImages","type","onClick","toConsumableArray","random","pop","toString","onChange","value","e","parseFloat","target","parseInt","components_CircularSideNav_CircularSideNav","menueImage","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79071a97.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/happy.7cbb65bd.png\";","module.exports = __webpack_public_path__ + \"static/media/sad2.3c559c0d.png\";","module.exports = __webpack_public_path__ + \"static/media/angry.31a21caa.png\";","module.exports = __webpack_public_path__ + \"static/media/mustaches.54f12e72.png\";","module.exports = __webpack_public_path__ + \"static/media/nav.9ce1ab9c.png\";","import React from 'react';\r\n\r\nimport \"./CircularSideNav.css\";\r\n\r\ninterface IState {\r\n    windowWidth: number;\r\n    windowHeight: number;\r\n    mainCircleRadius: number;\r\n    outerCircleRadius: number;\r\n    isHovering: boolean;\r\n}\r\n\r\ntype IProps = {\r\n    children?: JSX.Element;\r\n    navSize: number;\r\n    elements: JSX.Element[];\r\n    animation?: String | 'sequence';\r\n    animationPeriod?: number;\r\n    backgroundImg?: String;\r\n    backgroundColor?: string;\r\n}\r\n\r\nclass CircularSideNav extends React.Component<IProps, IState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            windowWidth: window.innerWidth,\r\n            windowHeight: window.innerHeight,\r\n            mainCircleRadius: window.innerHeight * (this.props.navSize / 100),\r\n            outerCircleRadius: window.innerHeight * (this.props.navSize / 100),\r\n            isHovering: false\r\n        };\r\n    }\r\n    \r\n    componentWillReceiveProps(props: any){\r\n        console.log(props.animationPeriod);\r\n        if(props.navSize >=0 && this.state.mainCircleRadius !== window.innerHeight * (props.navSize / 100)){\r\n            this.setState(prevState => {\r\n                return {\r\n                ...prevState,\r\n                mainCircleRadius: window.innerHeight * (props.navSize / 100),\r\n                outerCircleRadius: window.innerHeight * (props.navSize / 100)\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    updateWindowDimensions() {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                windowWidth: window.innerWidth,\r\n                windowHeight: window.innerHeight,\r\n                mainCircleRadius: window.innerHeight * (this.props.navSize / 100),\r\n                outerCircleRadius: window.innerHeight * (this.props.navSize / 100)\r\n            };\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.updateWindowDimensions.bind(this));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateWindowDimensions.bind(this));\r\n    }\r\n\r\n    openElementsHandler = () => {\r\n        this.setState({ isHovering: true, outerCircleRadius: (this.state.mainCircleRadius) * 2.5 })\r\n    }\r\n\r\n    closeElementsHandler = () => {\r\n        this.setState({ isHovering: false, outerCircleRadius: this.state.mainCircleRadius })\r\n    }\r\n\r\n    render() {\r\n        const middleOfPage = this.state.windowHeight / 2;\r\n        const isHovering = this.state.isHovering;\r\n        const elementsLength = (this.props.elements.length + 1);\r\n        const T = 180 / elementsLength;\r\n\r\n        const mainCircleRadius = Math.floor(this.state.mainCircleRadius);\r\n        const outerCircleRadius = Math.floor(this.state.outerCircleRadius);\r\n\r\n        const elemetRadius = elementsLength <= 4 ? outerCircleRadius / 4 : outerCircleRadius / elementsLength;\r\n\r\n        const navElements = this.props.elements.map((el, i) => {\r\n            let newT = T * (i + 1);\r\n            newT = newT <= 90 ? (90 - newT) : 360 - (newT - 90);\r\n            const circleX = Math.round(Math.cos(Math.PI * (newT / 180)) * (outerCircleRadius - elemetRadius));\r\n            const circleY = -Math.round(Math.sin(Math.PI * (newT / 180)) * (outerCircleRadius - elemetRadius));\r\n\r\n            const elStyle = {\r\n                left: isHovering ? (circleX + outerCircleRadius - elemetRadius) : mainCircleRadius,\r\n                top: isHovering ? (circleY + outerCircleRadius - elemetRadius) : mainCircleRadius,\r\n                width: isHovering ? elemetRadius * 2 : 0,\r\n                height: isHovering ? elemetRadius * 2 : 0,\r\n                cursor: \"pointer\",\r\n                transitionDelay: this.props.animation === 'sequence' ? (i * (this.props.animationPeriod ? this.props.animationPeriod : 0.05)) + 's' : '0s'\r\n            };\r\n\r\n            const className = el.props.className ? el.props.className : '';\r\n            return (\r\n                <div key={i + \"m-cn-e-d \" + className} className={\"m-cn-e-d \" + className} style={elStyle}>\r\n                    {el}\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <>\r\n                <div className=\"m-cn-d\"\r\n                    style={{\r\n                        top: isHovering ? middleOfPage - mainCircleRadius : middleOfPage - mainCircleRadius,\r\n                        left: -mainCircleRadius,\r\n                        width: isHovering ? mainCircleRadius * 2 : mainCircleRadius * 2 - (elemetRadius),\r\n                        height: isHovering ? mainCircleRadius * 2 : mainCircleRadius * 2 - (elemetRadius),\r\n                        backgroundImage: `url(${this.props.backgroundImg ? this.props.backgroundImg : \"\"})`,\r\n                        backgroundColor: this.props.backgroundColor ? this.props.backgroundColor : \"#5a5a5a93\",\r\n                        backgroundSize: \"cover\"\r\n                    }}\r\n                ></div>\r\n                <div\r\n                    onMouseEnter={this.openElementsHandler}\r\n                    onMouseLeave={this.closeElementsHandler}\r\n                    style={{\r\n                        width: outerCircleRadius * 2,\r\n                        height: outerCircleRadius * 2,\r\n                        top: middleOfPage - outerCircleRadius,\r\n                        left: -outerCircleRadius\r\n                    }} className=\"o-cn-d\">\r\n                    {navElements}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CircularSideNav;","import React, { useState } from 'react';\n\nimport './App.css';\nimport menueImage from './assets/images/nav.png';\nimport happy from './assets/images/happy.png';\nimport sad from './assets/images/sad2.png';\nimport angry from './assets/images/angry.png';\nimport mustaches from './assets/images/mustaches.png';\n\nimport CircularSideNav from './components/CircularSideNav/CircularSideNav';\n\nfunction App() {\n  const [state, setState] = useState(\n    {\n      elements: [\n        <img className='change-color-sad' src={sad} />,\n        <img className='change-color-angry' src={angry} />,\n        <img className='change-color-happy' src={happy} />,\n        <img className='change-color-mustaches' src={mustaches} />,\n        <div style={{ width: '100%', height: '100%', borderRadius: '50%', backgroundColor: '#CCF' }}></div>\n      ],\n      navSize: 15,\n      animationPeriod: 0.04,\n      mainCircleColor: 'gray',\n      animation: ''\n    }\n  );\n\n  let testImages = [\n    <img className='change-color-sad' src={sad} />,\n    <img className='change-color-angry' src={angry} />,\n    <img className='change-color-happy' src={happy} />,\n    <img className='change-color-mustaches' src={mustaches} />\n  ];\n\n\n  return (\n    <>\n      <header className='header'>\n        <h1>Controls</h1>\n        <button type='button' onClick={() => {\n          setState({\n            ...state,\n            elements: [...state.elements, testImages[~~(testImages.length * Math.random())]]\n          });\n        }}>Add Element</button>\n        <button type='button' onClick={() => {\n          state.elements.pop();\n        }}>Remove Element</button>\n        <br />\n        <button type='button' onClick={() => {\n          setState({\n            ...state,\n            mainCircleColor: '#' + (Math.random() * 0xFFFFFF << 0).toString(16)\n          });\n        }}>Random Menu Icon Color</button>\n        <br />\n        Sequesnce Elements {' '}\n        <input type='checkbox' onChange={() => {\n          state.animation == 'sequence' ? setState({\n            ...state,\n            animation: ''\n          }) : setState({\n            ...state,\n            animation: 'sequence'\n          })\n        }} />\n        <br />\n        Sequesnce Elements Transition Period {' '}\n        <input type='number' value={state.animationPeriod} onChange={(e) => {\n          setState({\n            ...state,\n            animationPeriod: parseFloat(e.target.value)\n          })\n        }} />\n        <br />\n        Nav Size {' '}\n        <input type='number' value={state.navSize} onChange={(e) => {\n          setState({\n            ...state,\n            navSize: parseInt(e.target.value)\n          })\n        }} />  \n      </header>\n      <CircularSideNav\n        backgroundImg={menueImage}\n        backgroundColor={state.mainCircleColor}\n        navSize={state.navSize}\n        elements={state.elements}\n        animation={state.animation}\n        animationPeriod={state.animationPeriod}\n      />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.tsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}